{"by":"open-source-ux","descendants":17,"id":15529186,"kids":[15531569,15534457,15531649,15537708],"score":20,"text":"Sometimes understanding a programming language paradigm&#x2F;pattern&#x2F;feature doesn&#x27;t mean you can code easily using that paradigm&#x2F;pattern&#x2F;feature.<p>Maybe you struggle with object-oriented programming? Or maybe it&#x27;s functional programming that&#x27;s never clicked? Or maybe some other programming paradigm like stack-based programming (Forth) or goal-directed execution (Icon, Unicon).<p>Or is it a particular feature within a language (e.g Monads) that just doesn&#x27;t make sense?<p>Do you avoid these ideas or features? Maybe you feel you have no need for them? Or do you still want to master or at least understand them better?<p>Or maybe you have the opposite problem: you know a pattern or feature so well that you reach for it every time regardless of whether it&#x27;s suitable for the problem at hand? (Anyone brave enough to admit that :-)","time":1508709476,"title":"Ask HN: What ideas in programming languages do you find difficult to code?","type":"story"}